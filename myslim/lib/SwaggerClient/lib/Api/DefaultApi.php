<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  wxlink
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * default_1478677476284
 *
 * 查询多项信息
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace api;

use \wxlink\Configuration;
use \wxlink\ApiClient;
use \wxlink\ApiException;
use \wxlink\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  wxlink
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \wxlink\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \wxlink\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\wxlink\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://way.jd.com/51daas');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \wxlink\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \wxlink\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\wxlink\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation qryCreditMultiData
     *
     * 查询多项信息
     *
     * @param string $name 姓名 (required)
     * @param string $card_num 身份证号 (required)
     * @param string $appkey 万象平台提供的appkey (required)
     * @return string
     * @throws \wxlink\ApiException on non-2xx response
     */
    public function qryCreditMultiData($name, $card_num, $appkey)
    {
        list($response) = $this->qryCreditMultiDataWithHttpInfo($name, $card_num, $appkey);
        return $response;
    }

    /**
     * Operation qryCreditMultiDataWithHttpInfo
     *
     * 查询多项信息
     *
     * @param string $name 姓名 (required)
     * @param string $card_num 身份证号 (required)
     * @param string $appkey 万象平台提供的appkey (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \wxlink\ApiException on non-2xx response
     */
    public function qryCreditMultiDataWithHttpInfo($name, $card_num, $appkey)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling qryCreditMultiData');
        }
        // verify the required parameter 'card_num' is set
        if ($card_num === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_num when calling qryCreditMultiData');
        }
        // verify the required parameter 'appkey' is set
        if ($appkey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appkey when calling qryCreditMultiData');
        }
        // parse inputs
        $resourcePath = "/qryCreditMultiData";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('text/plain'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($card_num !== null) {
            $queryParams['cardNum'] = $this->apiClient->getSerializer()->toQueryValue($card_num);
        }
        // query params
        if ($appkey !== null) {
            $queryParams['appkey'] = $this->apiClient->getSerializer()->toQueryValue($appkey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/qryCreditMultiData'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
